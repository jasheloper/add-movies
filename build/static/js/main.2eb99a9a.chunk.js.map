{"version":3,"sources":["Movie.js","MovieContext.js","MovieList.js","Nav.js","AddMovie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","name","price","MovieContext","createContext","MovieProvider","props","useState","id","movies","setMovies","Provider","value","children","MovieList","useContext","map","movie","key","Nav","className","length","AddMovie","setName","setPrice","onSubmit","e","preventDefault","prevMovies","type","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAiBeA,EAdD,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAGlB,OACI,oCACP,4BAAKD,GACL,2BAAIC,KCFQC,EAAeC,0BAGfC,EAAgB,SAAAC,GAAU,IAAD,EACNC,mBAAS,CACjC,CAACN,KAAM,eACPC,MAAO,MACPM,GAAI,SAEJ,CAACP,KAAM,kBACPC,MAAO,MACPM,GAAI,OAEJ,CAACP,KAAM,YACPC,MAAO,MACPM,GAAI,SAZ0B,mBAC3BC,EAD2B,KACnBC,EADmB,KAelC,OACI,oCAKA,kBAACP,EAAaQ,SAAd,CAAuBC,MAAO,CAACH,EAAQC,IAClCJ,EAAMO,YCNJC,EAlBG,WAAM,MAGQC,qBAAWZ,GAHnB,mBAGbM,EAHa,UAKpB,OACI,oCAGHA,EAAOO,KAAI,SAAAC,GAAK,OACV,kBAAC,EAAD,CAAOhB,KAAMgB,EAAMhB,KAAMC,MAAOe,EAAMf,MAAOgB,IAAKD,EAAMT,UCKpDW,EAnBH,WAAO,IAAD,EACUJ,qBAAWZ,GADrB,mBACXM,EADW,UAGd,OACI,oCAEA,yBAAKW,UAAU,OACtB,wBAAIA,UAAU,SAAd,mBACA,uBAAGA,UAAU,gBAAb,mBAA6CX,EAAOY,W,OCgCtCC,EAzCE,WAAO,IAAD,EACKf,mBAAS,IADd,mBACZN,EADY,KACNsB,EADM,OAEOhB,mBAAS,IAFhB,mBAEZL,EAFY,KAELsB,EAFK,OAGST,qBAAWZ,GAHpB,mBAGJO,GAHI,WAmBnB,OACI,oCACQ,6BACR,yBAAKU,UAAU,QAEX,2CAEJ,0BAAMK,SAbO,SAAAC,GACbA,EAAEC,iBACFjB,GAAU,SAAAkB,GAAU,4BAAQA,GAAR,CAAoB,CAAC3B,KAAMA,EAAMC,MAAOA,UAYxD,2BAAO2B,KAAK,OAAO5B,KAAK,OAAOW,MAAOX,EAAM6B,SAtBjC,SAACJ,GAChBH,EAAQG,EAAEK,OAAOnB,UAsBb,2BAAOiB,KAAK,OAAO5B,KAAK,QAAQW,MAAOV,EAAO4B,SAnBlC,SAACJ,GACjBF,EAASE,EAAEK,OAAOnB,UAmBd,8CCPGoB,MAff,WACE,OAIE,kBAAC,EAAD,KACI,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACF,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2eb99a9a.chunk.js","sourcesContent":["import React  from 'react';\n\n\nconst Movie = ({name, price}) => {\n\n\n    return (\n        <> \n <h3>{name}</h3>\n <p>{price}</p>\n  </>\n\n    )\n  \n}\n\n\nexport default Movie; ","import React,{useState, createContext} from 'react';\n\n\n// This just provides information to the different components\n// You only need to set it up once\n// The Provider's job is to just hold some information & then pass it down to all the different components that we want to\n\nexport const MovieContext = createContext();\n\n\nexport const MovieProvider = props => {\n    const [movies, setMovies] = useState([\n        {name: 'Harry Potter', \n        price: '$10', \n        id: 2566124}, \n\n        {name: 'Game of Thrones', \n        price: '$10', \n        id: 23124}, \n\n        {name: 'Inception', \n        price: '$10', \n        id: 23524}\n    ])\n\n    return (\n        <>\n        \n       {/* This provider will provide the information to these components.  */}\n       {/* Getting access to the movies  */}\n\n        <MovieContext.Provider value={[movies, setMovies]}>\n            {props.children}\n        </MovieContext.Provider>\n        </>\n    )\n}\n\n","// import useContext - because this is how you use it\nimport React,{useState, useContext} from 'react';\n\nimport Movie from './Movie';\n\n// import movie context \nimport {MovieContext} from './MovieContext';\n\nconst MovieList = () => {\n\n    // using the value (and pass in the context that we want to use)\n    const [movies, setMovies] = useContext(MovieContext);\n\n    return (\n        <> \n\n      \n    {movies.map(movie => (\n           <Movie name={movie.name} price={movie.price} key={movie.id} />\n        ))} \n  </>\n\n    )\n  \n}\n\nexport default MovieList; \n\n\n// the steps above is how you get ACCESS to that information, info is now available to you from MovieContext.js","import React, {useContext}  from 'react';\nimport {MovieContext} from './MovieContext'\n\n\nconst Nav = () => {\nconst [movies, setMovies] = useContext(MovieContext)\n\n    return (\n        <> \n\n        <div className=\"nav\">\n <h3 className=\"title\">Jashele Tillman</h3>\n <p className=\"listofmovies\">List of Movies: {movies.length}</p>\n </div>\n\n\n  </>\n\n    )\n  \n}\n\n\nexport default Nav; ","import React, {useState,useContext} from 'react';\nimport {MovieContext} from './MovieContext';\n\nconst AddMovie = () => {\n    const [name, setName] = useState('');\n    const [price, setPrice] = useState('');\n    const [movies, setMovies] = useContext(MovieContext);\n\n    const updateName = (e) => {\n        setName(e.target.value)\n    }\n\n    const updatePrice = (e) => {\n        setPrice(e.target.value)\n    }\n\n    const addMovie = e => {\n        e.preventDefault();\n        setMovies(prevMovies => [...prevMovies, {name: name, price: price}])\n;\n    }\n\n    return(\n        <>\n                <br />\n        <div className=\"form\">\n\n            <h1>Add a Movie</h1>\n\n        <form onSubmit={addMovie}>\n            <input type=\"text\" name=\"name\" value={name} onChange={updateName} />\n            <input type=\"text\" name=\"price\" value={price} onChange={updatePrice} />\n            <button>Submit</button>\n        </form>\n\n        </div>\n     \n\n\n        </>\n    )\n\n}\n\nexport default AddMovie; ","import React from 'react';\nimport './App.css';\nimport MovieList from './MovieList';\nimport Nav from './Nav';\nimport AddMovie from './AddMovie';\n\n\n// Curly braces because we are not exporting it as default \nimport { MovieProvider } from './MovieContext';\n\nfunction App() {\n  return (\n\n    // Wrap all the components that we want to pass that state down to with the Movie Provider\n    \n    <MovieProvider>\n        <div className=\"App\">\n          <Nav />\n        <AddMovie />\n        <MovieList />\n        </div>\n    </MovieProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}